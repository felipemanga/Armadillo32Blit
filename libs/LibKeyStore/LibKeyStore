#include "../../include/Femto"
#include <LibHotswap>
#include <cstring>

class Value {
public:
    File& file;
    u32 key;
    u32 type = 0;
    u32 offset = 0;
};

class KeyStoreBase {
    static inline File file;
protected:
    enum class BlockType : u8 {
        Free,
        HashMap,
        Data
    };

    struct HashMapEntry {
        u32 address : 24;
        BlockType type;
    };

    union BlockHeader {
        struct {
            u64 freeMap;
        } data;
    };

    static constexpr u32 blockSize = 1024;

    static constexpr u32 entriesPerBlock = blockSize / sizeof(HashMapEntry);
    static constexpr u32 groupSize = blockSize / 64;

    static constexpr u32 hashBitsMask    = nextPowerOfTwo(entriesPerBlock) - 1;
    static constexpr u32 hashBitsPerEntry = countTrailingZeros(hashBitsMask + 1);

    static constexpr u32 rootHashMap = 0;
    static constexpr u32 rootFreeMap = 0;

    static u32 findFreeBlocks(u32 blockCount) {
        u32 freeMapId = rootFreeMap;
        BlockHeader header;

        while (freeMapId) {
            u64 mask = ~u64{} >> (64 - blockCount);
            file.seek(freeMapId * blockSize);
            file >> header;

            u64 map;
            for (u32 i = 0; i < freeMapsPerBlock; ++i) {
                u32 pos = file.tell();
                file >> map;
                for (u32 j = 0; j < 64 - blockCount; ++j ){
                    if (((map >> j) & mask) == 0) {
                        file.seek(pos);
                        map |= mask << j;
                        file << map;
                        return (freeMapId + 1) * blockSize + (i * 64 + j) * blockSize;
                    }
                }
            }

            prevMapId = freeMapId;
            freeMapId = header.free.nextBlock;
        }

        freeMapId = file.size() / blockSize;
        file.seek(rootFreeMap * blockSize);
        file >> header;
        file.seek(rootFreeMap * blockSize);
        file << freeMapId;
        file.seek(freeMapId * blockSize);
        file << header.free.nextBlock;
        header.free.nextBlock = freeMapId;
    }

    static u32 allocBlocks(u32 capacity, bool zero) {
        u32 blockCount = (capacity / blockSize) + (capacity % blockSize ? 1 : 0);

        auto freeBlockId = file.read<u32>();
        if (freeBlockId) {
            file.seek(freeBlockId * blockSize);
            auto nextFreeBlock = file.read<u32>();
            file.seek(0);
            file << nextFreeBlock;
            LOG("Recycling free block ", freeBlockId, "\n");
        } else freeBlockId = file.size() / blockSize;

        if (zero) {
            file.seek(freeBlockId * blockSize);
            char padding[] = {0,0,0,0};
            for (u32 i = 0; i < 512 / 4; ++i) {
                file.write(padding, 4);
            }
            LOG("Zeroing DB for ", freeBlockId, "\n");
        }

        return freeBlockId;
    }

    static u32 allocBlock(BlockType type){
        switch (type) {
        case BlockType::Data: return allocBlock(false);
        case BlockType::Free: return 0;
        case BlockType::HashMap: return allocBlock(true);
        }
        return 0;
    }

    static void freeBlock(u32 id){
        file.seek(0);
        BlockHeader zero, block;
        file >> zero;
        file.seek(0);
        block = zero;
        zero.hashMap.freeBlockId = id;
        file << zero;
        file.seek(id * blockSize);
        file << block;
        LOG("Added block ", id, " to free list before ", block.free.nextBlock, "\n");
    }

    static u32 allocData(u32 len) {

    }

    static u32 freeData(u32 address) {
        u32 blockId = address / blockSize;
        LOG("Unallocating data ", address, " from block ", blockId, "\n");
    }

public:
    static bool init(const char *name) {
        LOG("[",
            "blockSize: ", blockSize, " | ",
            "entriesPerBlock: ", entriesPerBlock, " | ",
            "hashBitsMask: ", hashBitsMask, " | ",
            "hashBitsPerEntry: ", hashBitsPerEntry,
            "]\n");

        if (file) {
            LOG("DB Already initialized\n");
            return false;
        }

        if (!file.openRW(name, true, false)) {
            LOG("Could not open DB \"", name, "\"\n");
            return false;
        }

        if (!file.size()) {
            LOG("Empty DB. Initializing.\n");
            allocBlock(BlockType::HashMap);
        }

        return true;
    }

    static void inconsistentDBError() {
        LOG("Error: Corrupted DB?\n");
    }

    static Value find (StringInfo str) {
        Value ret{file, str};
        u32 key = str;
        u32 id = 0;
        BlockType type = BlockType::HashMap;

        while (true) {
            switch (type) {
            case BlockType::HashMap: {
                u32 entryPos = id * blockSize + sizeof(BlockHeader) + sizeof(HashMapEntry) * (key & hashBitsMask);
                // LOG((void*)(key & hashBitsMask), " & ", entryPos, "\n");
                key >>= hashBitsPerEntry;
                file.seek(entryPos);
                HashMapEntry entry;
                file >> entry;
                if (!entry.address) { // new key
                    ret.offset = 0;
                    return ret;
                }
                type = entry.type;
                id = entry.address / blockSize;
                ret.offset = entry.address;
                break;
            }

            case BlockType::Data:
                return ret; // found key match

            case BlockType::Free:
                inconsistentDBError();
                return ret;
            }
        }

        return ret;
    }

    template <typename Type>
    static void store(StringInfo key, const Type& value) {
        store(key, type_name<Type>(), &value, sizeof(Type));
    }

    static void store(StringInfo str, StringInfo typeInfo, const void* data, u32 len) {
        u32 key = str;
        u32 id = 0;
        BlockType type = BlockType::HashMap;

        u32 entryPos = 0;
        HashMapEntry entry;

        for (s32 bitsLeft = sizeof(u32) * 8; bitsLeft > 0; ) {
            bitsLeft -= hashBitsPerEntry;
            u32 entryKey = key & hashBitsMask;
            key >>= hashBitsPerEntry;

            entryPos = id * blockSize + sizeof(BlockHeader) + sizeof(HashMapEntry) * entryKey;
            file.seek(entryPos);
            file >> entry;

            if (!entry.address) {
                if (bitsLeft > 0)
                    entry.address = allocBlock(BlockType::HashMap);
                entry.type = bitsLeft > 0 ? BlockType::HashMap : BlockType::Data;
                file.seek(entryPos);
                file << entry;
            }
        }

        bool updateEntry = false;
        if (!entry.address) {
            entry.address = allocData(len);
            updateEntry = true;
        } else {
            file.seek(entry.address);
            auto oldLen = file.read<u32>();
            if (oldLen < len) {
                freeData(entry.address);
                entry.address = allocData(len);
                updateEntry = true;
            }
        }

        LOG("Storing ", (std::string_view) str,
            " at ", (void*) uptr(entry.address),
            " with type ", (u32)typeInfo,
            " (", (std::string_view) typeInfo, ")",
            "\n");

        if (updateEntry) {
            file.seek(entryPos);
            file << entry;
        }

        file.seek(entry.address);
        file << len << (u32) typeInfo;
        file.write(data, len);
    }
};

template <u32 _swapsize = 0>
class KeyStore : public KeyStoreBase {
public:
    static constexpr auto swapSize = _swapsize;
    using swap = Hotswap<swapSize, 0x3d02f0e7>;

};

template <>
class KeyStore<0> : public KeyStoreBase {};
